package plugin

import (
	"strings"

	"google.golang.org/protobuf/reflect/protoreflect"
)

type message struct {
	path string
	fd   protoreflect.FileDescriptor
	f    *File
}

func (g message) Generate() {
	g.f.P("// Code generated by protoc-gen-kratos-dart-http. DO NOT EDIT.")
	g.f.P()
	g.f.P(`import 'package:json_annotation/json_annotation.dart';`)
	g.f.P()
	g.f.P(`part '`, fileName(g.path), `.g.dart';`)
	g.f.P()

	ms := g.fd.Messages()
	for i := 0; i < ms.Len(); i++ {
		if i > 0 {
			g.f.P()
		}
		g.message(ms.Get(i))
	}
}

func (g message) message(m protoreflect.MessageDescriptor) {
	for _, comment := range g.comments(m) {
		g.f.P(`///`, comment)
	}

	g.f.P("@JsonSerializable()")
	g.f.P("class ", m.Name(), " {")

	if fs := m.Fields(); fs.Len() == 0 {
		g.f.P(`  const `, m.Name(), `();`)
	} else {
		g.f.P(`  const `, m.Name(), `({`)
		for i := 0; i < fs.Len(); i++ {
			g.constructorField(fs.Get(i))
		}
		g.f.P(`  });`)
	}
	g.f.P()

	if fs := m.Fields(); fs.Len() != 0 {
		for i := 0; i < fs.Len(); i++ {
			g.field(fs.Get(i))
		}
		g.f.P()
	}

	g.f.P(`  factory `, m.Name(), `.fromJson(Map<String, dynamic> json) {`)
	g.f.P(`    return _$`, m.Name(), `FromJson(json);`)
	g.f.P(`  }`)
	g.f.P()

	g.f.P(`  Map<String, dynamic> toJson() => _$`, m.Name(), `ToJson(this);`)

	g.f.P("}")
}

func (g message) comments(s protoreflect.Descriptor) []string {
	loc := g.fd.SourceLocations().ByDescriptor(s)
	return strings.Split(strings.TrimSuffix(loc.LeadingComments, "\n"), "\n")
}

func (g message) constructorField(fd protoreflect.FieldDescriptor) {
	if fd.HasOptionalKeyword() {
		g.f.P(`    this.`, fd.JSONName(), `,`)
	} else {
		g.f.P(`    required this.`, fd.JSONName(), `,`)
	}
}

func (g message) field(fd protoreflect.FieldDescriptor) {
	for _, comment := range g.comments(fd) {
		g.f.P(`  ///`, comment)
	}

	switch {
	case fd.HasOptionalKeyword():
		g.f.P(`  final `, messageType(fd), `? `, fd.JSONName(), `;`)
	default:
		g.f.P(`  final `, messageType(fd), ` `, fd.JSONName(), `;`)
	}
}

func messageType(fd protoreflect.FieldDescriptor) any {
	switch fd.Kind() {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		return "int"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		return "int"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		return "int"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		return "int"
	case protoreflect.FloatKind:
		return "double"
	case protoreflect.DoubleKind:
		return "double"
	case protoreflect.StringKind:
		return "String"
	case protoreflect.BytesKind:
		return "List<int>"
	case protoreflect.MessageKind:
		return fd.Message().Name()
	case protoreflect.EnumKind:
		return fd.Enum().Name()
	default:
		return "dynamic"
	}
}
